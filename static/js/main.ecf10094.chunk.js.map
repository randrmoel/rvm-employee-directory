{"version":3,"sources":["components/Employees.js","components/Search.js","components/Directory.js","App.js","serviceWorker.js","index.js"],"names":["Employees","props","className","style","textAlign","firstName","lastName","email","phone","Search","placeholder","name","type","onChange","event","startFilter","Directory","state","employees","empFiltered","search","filtered","orderDir","componentDidMount","fetch","then","res","json","setState","results","sort","a","b","last","first","sortAscLast","handleSort","colHead","console","log","filterEmp","filter","toLowerCase","includes","target","value","render","label","onClick","fontStyle","map","employee","key","id","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ecf10094.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/Employees.css\";\n\nconst Employees = (props) => {\n\n  return (\n\n    <div className=\"row empRow\">\n      <div style={{textAlign:\"left\"}} className=\"col-md-4\">{props.firstName} {props.lastName}</div>\n      <div style={{textAlign:\"left\"}} className = \"col-md-4\">{props.email}</div>\n      <div style={{textAlign:\"left\"}} className=\"col-md-4\">{props.phone} </div>\n    </div>\n\n  )\n\n}\n\nexport default Employees;","import React from \"react\";\nimport \"../styles/Search.css\";\n\nconst Search = (props) => {\n\n  return (\n    <div className=\"d-flex justify-content-center mx-auto\">\n      <form>\n        <input\n          placeholder=\"Type Name or Email Here\"\n          name=\"search\"\n          type=\"text\"\n          className=\"form-control-lg search-font mx-auto\"\n          onChange={(event) => props.startFilter(event)}\n        />\n      </form>\n    </div>\n  );\n}\n\nexport default Search;","// Load required components\nimport React, { Component } from \"react\";\nimport Employees from \"./Employees.js\";\nimport Search from \"./Search.js\";\nimport \"../styles/Directory.css\";\n\n//Extend class to Directory\nclass Directory extends Component {\n\n //Set state variables to check\n  state = {\n    employees: [],\n    empFiltered: [],\n    search: \"\",\n    filtered: false,\n    orderDir: \"desc\"\n  };\n\n  // check for rendering wait for data\n  componentDidMount = () => {\n    fetch(`https://randomuser.me/api/?results=25&nat=us&inc=name,email,phone,id`)\n      .then(res => res.json())\n      .then(json => {\n        this.setState({ employees: json.results.sort(function(a,b){\n          return ((a.name.last+a.name.first === b.name.last+a.name.first) ? 0 : ((a.name.last+a.name.first > b.name.last+a.name.first) ? 1 :-1));\n        }) })\n      })\n  };\n\n  sortAscLast = (a,b)=>{\n    return ((a.name.last+a.name.first === b.name.last+a.name.first) ? 0 : ((a.name.last+a.name.first > b.name.last+a.name.first) ? 1 :-1));\n  }\n\n  handleSort = (colHead) =>{\n    \n    switch (colHead){\n      case 'Name':\n        if(this.state.orderDir ==='asc'){\n          this.setState({orderDir:'desc'});\n          this.setState({employees:this.state.employees.sort(function(a,b){\n            return ((a.name.last+a.name.first === b.name.last+a.name.first) ? 0 : ((a.name.last+a.name.first > b.name.last+a.name.first) ? 1 :-1));\n          })\n          })\n       } else {\n         this.setState({orderDir:'asc'});\n         this.setState({employees:this.state.employees.sort(function(a,b){\n          return ((a.name.last+a.name.first === b.name.last+a.name.first) ? 0 : ((a.name.last+a.name.first < b.name.last+a.name.first) ? 1 :-1));\n        })\n        })\n       }\n       break;\n      case 'Email':\n        if(this.state.orderDir ==='asc'){\n          this.setState({orderDir:'desc'});\n          this.setState({employees:this.state.employees.sort(function(a,b){\n            return ((a.email === b.email) ? 0 : ((a.email > b.email) ? 1 :-1));\n          })\n          })\n       } else {\n         this.setState({orderDir:'asc'});\n         this.setState({employees:this.state.employees.sort(function(a,b){\n          return ((a.email === b.email) ? 0 : ((a.email < b.email) ? 1 :-1));\n        })\n        })\n       }\n\n        break;\n      case 'Phone':\n        if(this.state.orderDir ==='asc'){\n          this.setState({orderDir:'desc'});\n          this.setState({employees:this.state.employees.sort(function(a,b){\n            return ((a.phone === b.phone) ? 0 : ((a.phone > b.phone) ? 1 :-1));\n          })\n          })\n       } else {\n         this.setState({orderDir:'asc'});\n         this.setState({employees:this.state.employees.sort(function(a,b){\n          return ((a.phone === b.phone) ? 0 : ((a.phone < b.phone) ? 1 :-1));\n        })\n        })\n       }\n\n        break;\n      default:\n        console.log('Do Nothing');\n        break;\n    }\n    //Logic for sorting\n    console.log(colHead);\n    //this.state = filtered? then set into the empFiltered otherwise to Employees\n  }\n\n  // sort through employees based on search term, check for match and set that to empFiltered for rendering\n  filterEmp = () => {\n    let { employees, search } = this.state;\n    let empFiltered = employees.filter(filtered => {\n      return (\n        filtered.name.first.toLowerCase().includes(search.toLowerCase()) ||\n        filtered.name.last.toLowerCase().includes(search.toLowerCase()) ||\n        filtered.email.toLowerCase().includes(search.toLowerCase())\n      )\n    })\n    this.setState({ empFiltered })\n  }\n\n  // grab search term, activate filtered  \n  startFilter = event => {\n    this.setState({ search: event.target.value }, () => {\n      this.filterEmp();\n      this.setState({ filtered: true });\n    });\n  };\n\n  render = () => {\n\n    return (\n\n      <div>\n        <div className=\"jumbotron\">\n          <h3 >\n            Employee Directory\n          </h3>\n          <Search\n            name=\"search\"\n            startFilter={this.startFilter}\n            label=\"Search\"\n          />\n        </div>\n\n        <div className=\"container\">\n\n            <div className=\"row header\">\n\n                <div onClick={()=>{this.handleSort(\"Name\")}} className=\"col-md-4\"><h2 style={{fontStyle:\"italic\", textAlign:\"left\"}}>Name</h2></div>\n                <div onClick={()=>{this.handleSort(\"Email\")}} className=\"col-md-4\"><h2 style={{fontStyle:\"italic\", textAlign:\"left\"}}>Email</h2></div>\n                <div onClick={()=>{this.handleSort(\"Phone\")}} className=\"col-md-4\"><h2 style={{fontStyle:\"italic\", textAlign:\"left\"}}>Phone</h2></div>\n\n            </div>\n            <div className =\"container\">\n\n              {/* use ternary operation, if it's not filtered, map accordingly */}\n              {!this.state.filtered ? this.state.employees.map(employee => (\n\n\n                < Employees\n                  key={employee.id.value}\n                  firstName={employee.name.first}\n                  lastName={employee.name.last}\n                  phone={employee.phone}\n                  email={employee.email}\n                />\n\n              ))\n                // otherwise map the filtered employees\n                : this.state.empFiltered.map(employee => (\n\n                  <Employees\n                    key={employee.id.value}\n                    firstName={employee.name.first}\n                    lastName={employee.name.last}\n                    phone={employee.phone}\n                    email={employee.email}\n                  />\n                ))};\n          </div >\n        </div>\n      </div >\n    )\n\n  }\n\n}\n\nexport default Directory;\n","import React from \"react\";\nimport Directory from \"./components/Directory\";\nimport './App.css';\n\nconst App = () => {\n\n  return (\n\n    <div className=\"App\">\n      <Directory />\n    </div>\n\n  )\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\n// code from activity 19 and 20\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}